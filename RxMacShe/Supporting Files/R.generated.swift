//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `logo-full`.
    static let logoFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-full")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `toolbar_bill_sel`.
    static let toolbar_bill_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_bill_sel")
    /// Image `toolbar_bill`.
    static let toolbar_bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_bill")
    /// Image `toolbar_home_sel`.
    static let toolbar_home_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_home_sel")
    /// Image `toolbar_home`.
    static let toolbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_home")
    /// Image `toolbar_member_sel`.
    static let toolbar_member_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_member_sel")
    /// Image `toolbar_member`.
    static let toolbar_member = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_member")
    /// Image `username`.
    static let username = Rswift.ImageResource(bundle: R.hostingBundle, name: "username")
    /// Image `vip`.
    static let vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip")
    /// Image `微信`.
    static let 微信 = Rswift.ImageResource(bundle: R.hostingBundle, name: "微信")
    /// Image `支付宝`.
    static let 支付宝 = Rswift.ImageResource(bundle: R.hostingBundle, name: "支付宝")
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-full", bundle: ..., traitCollection: ...)`
    static func logoFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoFull, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_bill", bundle: ..., traitCollection: ...)`
    static func toolbar_bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_bill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_bill_sel", bundle: ..., traitCollection: ...)`
    static func toolbar_bill_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_bill_sel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_home", bundle: ..., traitCollection: ...)`
    static func toolbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_home_sel", bundle: ..., traitCollection: ...)`
    static func toolbar_home_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_home_sel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_member", bundle: ..., traitCollection: ...)`
    static func toolbar_member(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_member, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_member_sel", bundle: ..., traitCollection: ...)`
    static func toolbar_member_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_member_sel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "username", bundle: ..., traitCollection: ...)`
    static func username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vip", bundle: ..., traitCollection: ...)`
    static func vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "微信", bundle: ..., traitCollection: ...)`
    static func 微信(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.微信, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "支付宝", bundle: ..., traitCollection: ...)`
    static func 支付宝(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.支付宝, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}